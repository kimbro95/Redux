######################
### 0 Introduction ###
######################
-Redux
기본적으로 Javascript application들의 state(상태)를 관리하는 방법이다.
React와 많이 사용되면서 유명해졌으나, React에서만 사용하는 라이브러리가 아니다.
Angular, Vue,js, Vanilla JS등 JS언어내의 여러곳에서 사용가능하다.



#############################
### 1.1 Store and Reducer ###
#############################
-Redux 설치
npm i redux

-Store
Store는 data를 저장하는 곳

-Reducer
Reducer는 data를 modify해주는 함수로 reducer가 return하는 data는 application에 있는 data가 된다.
Reducer만이 data를 modify한다.

-CreateStore
CreateStore는 reducer를 요구한다.



###################
### 1.2 Actions ###
###################
-Action
redux에서 function을 부를 때 두번째 parameter 또는 argument으로 reducer와 소통하기 위한 방법
reducer에게 Action을 보내는 방법 => store.dispatch({ type : value });



#########################
### 1.3 Subscriptions ###
#########################
-Subscibe
Subscibe는 store안에 있는 변화를 감지
ex) store.subscibe(function) --> store안에 변화가 감지되면 func를 실행



##########################
### 1.4 Recap Refactor ###
##########################
-reducer
현재 상태의 application과 함께 불려지는 function(+ with action) return하는 값은 application의 state값이된다.

-action
reducer와 소통하는 방법으로 ⭐Object⭐여야하고 key 이름은 ⭐type⭐이여야한다.

-dispatch
reducer에거 action을 보내는 방법

-subscibe
store의 변화를 감지하면 인자값으로 준 함수를 실행한다.

-switch
reducer에서 action 값으로 데이터를 처리 할 때
if else if esle 방식보다 ⭐switch⭐가 자주 쓰인다.
ex) switch(action.type){
        case action1:
            return data
        case action2:
            return data
        default:
            return data
    }
action.type 값을 string으로 바로 쓰기보다는 const variable 변수로 선언해서 사용하면 에러발견에 용이하다.



##########################
### 2.1 State Mutation ###
##########################
-Never Mutation
state는 single source of truth이며, read-only이다.
store를 수정할 수 있는 유일한 방법은 action을 보내는 방법뿐이다.
state를 mutate하지 말아야한다.
👉 mutating state 대신에 new state object를 리턴해야한다
ex)
const reducer = (state = [], action) => {
    switch (action.type) {
        case ADD_TODO:
            return state.push(action.text);             // mutating state 대신에 new state object를 리턴해야한다
        case DELETE_TODO:
            return [];
        default:
            return state;
    }
};
            👇👇👇👇
const reducer = (state = [], action) => {
    switch (action.type) {
        case ADD_TODO:
            return [...state, { text: action.text }];   // state를 mutate하지않고 new state object를 리턴
        case DELETE_TODO:
            return [];
        default:
            return state;
    }
};



########################
### 2.3 Delete To Do ###
########################
👉 mutating state 대신에 new state object를 리턴해야한다.
filter()는 테스트 통과한 모든 element들로 새로운 array를 만드다.
ex)
const reducer = (state = [], action) => {
    switch (action.type) {
        case ADD_TODO:
            return [{ text: action.text, id: Date.now() }, ...state];
        case DELETE_TODO:
            return state.filter(toDo => toDo.id !== action.id);         // state를 mutate하지않기 위해 filter()를 사용
            return state;
    }
};



#########################
### 4.0 Redux Toolkit ###
#########################
-Redux Toolkit
Redux에서 만든 리덕스의 단점들을 제거하는 방법. 
Redeux Toolkit은 아래의 단점을 극복하기 위해 나온 툴이다.

기존 Redux의 단점
- store 복잡성
- 유용해지려면 많은 패키지들을 추가해야한다.
- 많은 보일러플레이트 코드를 요구



########################
### 4.1 createAction ###
########################
-createAction
Redux action type 및 creator를 정의하기 위한 helper함수이다.

ex)
import { createAction } from '@reduxjs/toolkit'

const increment = createAction('counter/increment');
let action = increment(3) // { type: 'counter/increment', payload: 3 }

- 변경된 store
const ADD = "ADD";
const DELETE = "DELETE";

export const addToDo = text => {
    return {
        type: ADD,
        text
    };
};

export const deleteToDo = id => {
    return {
        type: DELETE,
        id: parseInt(id)
    };
};

            👇👇👇👇

export const addToDo = createAction("ADD");
export const deleteToDo = createAction("DELETE");

참조
https://redux-toolkit.js.org/api/createAction



#########################
### 4.2 createReducer ###
#########################
-createReducer
switch 구문을 사용하지 않아도 된다.
state를 mutate하기 쉽게 만들어준다. => 배열에 push를 하여 기존 배열의 값을 변형시킬 수 있게 해준다. 기존에는 새로운 state를 만들어야했음
mutate를 했다면 return X
mutate를 하지 않았다면 return O
ex)
// reducer
const reducer = (state = currentState, action) => {
    switch (action.type) {
        case addToDo.type:
            const todoObj = { id: Date.now(), text: action.payload }
            const addTodoData = [todoObj, ...state];
            localStorage.setItem("todo", JSON.stringify(addTodoData));
            return addTodoData;
        case deleteToDo.type:
            const deleteTodoData = state.filter((toDo) => toDo.id !== action.payload);
            localStorage.setItem("todo", JSON.stringify(deleteTodoData));
            return deleteTodoData;
        default:
            return state;
    }
};

            👇👇👇👇

// createReducer
const reducer = createReducer(currentState, {
    [addToDo]: (state, action) => {
        state.push({ id: Date.now(), text: action.payload });
        localStorage.setItem("todo", JSON.stringify(state));
    },
    [deleteToDo]: (state, action) => {
        state = state.filter((toDo) => toDo.id !== action.payload);
        localStorage.setItem("todo", JSON.stringify(state));
        return state;
    }
});



##########################
### 4.3 configureStore ###
##########################
-Redux DevTools(구글 확장프로그램)
https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=ko

-configureStore
더 나은 개발 경험을 위해 store 설정에 몇몇 기본 값을 추가한다.

ex) 
import { configureStore } from '@reduxjs/toolkit'

const store = configureStore({ reducer });

참조https://redux-toolkit.js.org/api/configureStore



#######################
### 4.4 createSlice ###
#######################
-createSlice
초기 state, reducer 함수의 객체 "slice 이름"을 받아 reducer 및 state에 해당하는 ation creator와 action type을 자동으로 생성하는 함수이다.
내부적으로는 createAction 및 createReducer를 사용하므로 immer를 사용하여 "mutating" 불변 업데이트를 작성할 수 도 있다.

참조
https://redux-toolkit.js.org/api/createSlice